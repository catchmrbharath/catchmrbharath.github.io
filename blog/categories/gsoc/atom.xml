<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gsoc | Bharath Mankalale]]></title>
  <link href="http://www.catchmrbharath.github.io/blog/categories/gsoc/atom.xml" rel="self"/>
  <link href="http://www.catchmrbharath.github.io/"/>
  <updated>2016-09-19T19:21:41-07:00</updated>
  <id>http://www.catchmrbharath.github.io/</id>
  <author>
    <name><![CDATA[Bharath Mankalale]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GSoC Last Week]]></title>
    <link href="http://www.catchmrbharath.github.io/blog/2012/08/19/gsoc-last-week/"/>
    <updated>2012-08-19T00:00:00-07:00</updated>
    <id>http://www.catchmrbharath.github.io/blog/2012/08/19/gsoc-last-week</id>
    <content type="html"><![CDATA[<p>This happens to be the last week of GSoC. The major things that I accomplished this
week are</p>

<ul>
<li>Got pylab to work interactively.</li>
<li>Made more changes to the documentation of plotting module.</li>
</ul>


<p>I have a pull request for the restructured plotting module at <a href="https://github.com/sympy/sympy/pull/1468">here</a>.
There has been lots of discussions on how the new plot API should look like in the pull request.
The API as of now has 5 functions:</p>

<ul>
<li><code>plot_line</code> which plots 2D line plots, which I think I will change to <code>plot</code>.</li>
<li><code>plot_parametric</code> which plots 2D parametric plots.</li>
<li><code>plot3D</code> which plots 3D plots.</li>
<li><code>plot3D_parametric</code> which plots 3D parametric line plots. I think I will have to
change it into <code>plot_parametric3D</code>.</li>
<li><code>plot3D_surface</code> which plots 3D parametric surfaces.</li>
</ul>


<p>The names are slightly confusing, but the alternative to these names are big. If you
have any good names for 3D plots, please leave it in the comments.</p>

<p>I will have another post describing the things I learnt over this GSoC period.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSOC Week 11]]></title>
    <link href="http://www.catchmrbharath.github.io/blog/2012/08/05/gsoc-week-11/"/>
    <updated>2012-08-05T00:00:00-07:00</updated>
    <id>http://www.catchmrbharath.github.io/blog/2012/08/05/gsoc-week-11</id>
    <content type="html"><![CDATA[<p>I got my adaptive sampling branch merged last week. Now the plots are sampled
adaptively and is more accurate. I also added a lot of tests to the implicit plotting
branch and the coverage now is greater than 90%.</p>

<p>One of the major things decided in the previous week was to restructure the plot
function. Presently <code>plot</code> is a single function, which depending on its input, renders
an 2d or an 3d plot. Though it plots the right kind of plot, the <code>plot</code> function is
quite complex and it was decided to split the plot function into smaller functions
that plots a particular type of plot. I tried an approach where all 2D plots are plotted
by a <code>plot2d</code> function, the 3D plots by <code>plot3D</code> and the existing <code>plot_implicit</code>
plots to plot regions and implicit equations. Aaron mentioned that the API is still very
complex as I was using tuples and lists to differentiate between a parametric plot
and a 2d line plot and he was right. It is a bit complex and it was decided to have
a functions for each kind of plot.</p>

<p>I think i can have the new plot functions as an PR by next week and I would like to
try getting a Mayavi backend ready by the end of my GSoC period.</p>

<p>I forgot to mention why I deviated from my what I said I would do in my GSoC
application. I tried getting a svgfig backend ready for almost one and a half week,
and it was quite difficult. svgfig is not being updated and I had a hard time getting
the axis ticks labelling to work most of the time. I wrote to the project maintainer
many times and he helped me with a lot of things, but the library was not polished
enough to use it with Sympy Live. So plotting for SymPy Live should be attempted
with a javascript plotting library rather than a python backend. If we get matplotlib
support on GAE, then it would be awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gsoc Week 9]]></title>
    <link href="http://www.catchmrbharath.github.io/blog/2012/07/23/gsoc-week-9/"/>
    <updated>2012-07-23T00:00:00-07:00</updated>
    <id>http://www.catchmrbharath.github.io/blog/2012/07/23/gsoc-week-9</id>
    <content type="html"><![CDATA[<p>This has been a really unproductive week. I was sick with fever for almost three
days and could not spend my time on anything. I spent the next days getting the
basic svgfig backend for 2d line plots. There are lots of issues with svgfig, and
hence I am of the opinion svgfig should be used only for displaying images on the
google app engine ie sympy live. First on the list is no support for 3-D graphs. I think this is
ok, because there are not many libraries even in javascript which can do 3D plotting.
Also, I am having problems with implementing contour plots and surface plots in
svgfig. I am experimenting with a way, which would involve using marching squares
algorithm to plot contour plots.</p>

<p>I think I am a little behind my gsoc schedule, and I should speed up things a little
in the next few weeks.</p>

<p>So these are the things that I have to address</p>

<ul>
<li>Integration of svgfig with sympy live</li>
<li>Fix the multiple spawning of windows in matplotlib issue.</li>
<li>Fix the plot tests. As of now, the tests do nothing, as the process_series is not called if show is set to False.</li>
<li>I have been toying around with ipython to get isympy notebook and qtconsole working. The problem I am facing is, there are 2 instances of qtconsole created, instead of one, when I run it. I will have to figure out the problem.</li>
<li>Address the issues regarding the adaptive sampling of 2d plots.</li>
<li>Clean up my branch of implicit plotting (This is almost done).</li>
<li>Split the plot function into plot, plot3d, implicit_plot functions.</li>
</ul>


<p>I don&rsquo;t think I will be able to do all of these by the end of gsoc period. But my priority will be getting the implicit plotting and svgfig backend working and getting my pull requests merged.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Week 7]]></title>
    <link href="http://www.catchmrbharath.github.io/blog/2012/07/09/gsoc-week-7/"/>
    <updated>2012-07-09T00:00:00-07:00</updated>
    <id>http://www.catchmrbharath.github.io/blog/2012/07/09/gsoc-week-7</id>
    <content type="html"><![CDATA[<p>This week has been quite eventful. The implicit plotting module is almost done. I added the functionality of combining expressions using the <code>And</code> and <code>Or</code> statements. Now you can do</p>

<pre><code>plot_implicit(And(Eq(y, exp(x)), y - x &gt; 2)
</code></pre>

<p>and get a plot as below. So now you can combine any number of equations / inequalities and plot it. I think its possible to do a lot of cool stuff combining equations / inequalities.
<img class="center" src="/images/09072012/fig1.png" width="600" height="400"></p>

<p>Plotting through interval math is awesome but is also very limited. You cannot add support to <code>re()</code>, to functions that you cannot characterize as monotonic in certain regions. But we always encounter such functions. So there should be some fall back algorithm to plot such plots. I implemented the fall back algorithm last week. The idea is borrowed from sage implicit plots. We convert an equation / inequality into a function which returns 1 if it satisfies and -1 if it doesn&rsquo;t satisfy. So if you are plotting an equality then you plot using the <code>contour</code> command of matplotlib, and instruct it to plot only the zero contour. If its an inequality then plotting the region with two colors gives the plot required.</p>

<p>These are examples from the fallback algorithm.</p>

<p>Plot of $y^{2}=x^{3}-x$
<img class="center" src="/images/09072012/fig2.png" width="600" height="400"></p>

<p>The plot with interval arithmetic is more precise.
<img class="center" src="/images/09072012/fig3.png" width="600" height="400"></p>

<p>I haven&rsquo;t finished with the tests. Once I finish the tests I can send a pull request. The pull request will be pretty big, but most of the things have been reviewed in my previous pull request. This is just an extension of the previous pull request.</p>

<p>There are certain problems with the module though. The line width problem which I mentioned in my previous blog post, cannot be fixed. So you will have to change to the fall back method if the line width becomes large. Also the fall back algorithm cannot plot boolean combinations of equations / inequalities. So the two methods complement each other largely. So the next question would be whether we can choose one of the two intelligently. I guess the answer is No. That decision must be taken by the user. But most of the times the interval math approach works very nicely.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GSoC Week 6]]></title>
    <link href="http://www.catchmrbharath.github.io/blog/2012/07/02/gsoc-week-6/"/>
    <updated>2012-07-02T00:00:00-07:00</updated>
    <id>http://www.catchmrbharath.github.io/blog/2012/07/02/gsoc-week-6</id>
    <content type="html"><![CDATA[<p>I have been trying to improve the implicit plotting module during this week. But I have hit a road block. I almost ran out of ideas to solve the problem.</p>

<p>Description:</p>

<p>The implicit plotting algorithm I implemented works something like below:</p>

<p>1) Get x and y interval. If it satisfies the expression throughout the interval, then plot it.</p>

<p>2) If it does not satisfy, throw away the intervals.</p>

<p>3) If it partially satisfies, then recursively subdivide into four intervals, and try again.</p>

<p>For cases of equality, the first point never holds true due to floating point errors. So we go on
eliminating regions, and after a certain depth, plot the remaining region. These are the regions where there is at least one solution. This is the reason why the plots are rasterized. But there is an inherent bigger problem here. In the cases of expressions like $x^{3}$ even if the x interval is small, the resulting interval after computation will be large. Sometimes, due to these large intervals, there might be lots of y and x intervals which satisfy because of these errors. Even if we make x interval really small, the corresponding y interval will be large, ie the line widths become large. The explanation is more of a guess rather than the right explanation.</p>

<p>Examples:</p>

<p>Plot of $x^{y}=y^{x}$
<img class="center" src="/images/02072012/fig1.png" width="600" height="400">
Even if I increase my depth of recursion to higher values, the thickness becomes less, but doesn&rsquo;t vanish. The plot actually should have been two separate curves.</p>

<p><img class="center" src="/images/02072012/fig3.png" width="600" height="400"></p>

<p>The Mac OSX&rsquo;s Grapher uses a similar algorithm(A guess because they have similar rasterization) but takes care of the line widths.</p>

<p>If you feel you know where the problem is, please comment or email me. :)</p>
]]></content>
  </entry>
  
</feed>
